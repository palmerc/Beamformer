// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Proto/SmartWave.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Smartwave_Wrapper: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Wrapper"

  var messageType: Smartwave_Wrapper.MessageType = .settings

  var messageBytes: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum MessageType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case settings // = 0
    case frame // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .settings
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .settings
      case 1: self = .frame
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .settings: return 0
      case .frame: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.messageType)
      case 2: try decoder.decodeSingularBytesField(value: &self.messageBytes)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.messageType != .settings {
      try visitor.visitSingularEnumField(value: self.messageType, fieldNumber: 1)
    }
    if !self.messageBytes.isEmpty {
      try visitor.visitSingularBytesField(value: self.messageBytes, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Smartwave_Frame: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Frame"

  var identifier: String = String()

  var settingsIdentifier: String = String()

  var timestamp: UInt64 = 0

  var channelSamples: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.identifier)
      case 2: try decoder.decodeSingularStringField(value: &self.settingsIdentifier)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.timestamp)
      case 4: try decoder.decodeRepeatedSInt32Field(value: &self.channelSamples)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.identifier.isEmpty {
      try visitor.visitSingularStringField(value: self.identifier, fieldNumber: 1)
    }
    if !self.settingsIdentifier.isEmpty {
      try visitor.visitSingularStringField(value: self.settingsIdentifier, fieldNumber: 2)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.timestamp, fieldNumber: 3)
    }
    if !self.channelSamples.isEmpty {
      try visitor.visitPackedSInt32Field(value: self.channelSamples, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Smartwave_Settings: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Settings"

  var identifier: String = String()

  var channelCount: Int32 = 0

  var samplesPerChannel: Int32 = 0

  var elementPitchMillimeters: Double = 0

  var samplingFrequencyHz: Double = 0

  var centralFrequencyHz: Double = 0

  var lensCorrection: Double = 0

  var anglesInRadians: [Double] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.identifier)
      case 2: try decoder.decodeSingularInt32Field(value: &self.channelCount)
      case 3: try decoder.decodeSingularInt32Field(value: &self.samplesPerChannel)
      case 4: try decoder.decodeSingularDoubleField(value: &self.elementPitchMillimeters)
      case 5: try decoder.decodeSingularDoubleField(value: &self.samplingFrequencyHz)
      case 6: try decoder.decodeSingularDoubleField(value: &self.centralFrequencyHz)
      case 7: try decoder.decodeSingularDoubleField(value: &self.lensCorrection)
      case 8: try decoder.decodeRepeatedDoubleField(value: &self.anglesInRadians)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.identifier.isEmpty {
      try visitor.visitSingularStringField(value: self.identifier, fieldNumber: 1)
    }
    if self.channelCount != 0 {
      try visitor.visitSingularInt32Field(value: self.channelCount, fieldNumber: 2)
    }
    if self.samplesPerChannel != 0 {
      try visitor.visitSingularInt32Field(value: self.samplesPerChannel, fieldNumber: 3)
    }
    if self.elementPitchMillimeters != 0 {
      try visitor.visitSingularDoubleField(value: self.elementPitchMillimeters, fieldNumber: 4)
    }
    if self.samplingFrequencyHz != 0 {
      try visitor.visitSingularDoubleField(value: self.samplingFrequencyHz, fieldNumber: 5)
    }
    if self.centralFrequencyHz != 0 {
      try visitor.visitSingularDoubleField(value: self.centralFrequencyHz, fieldNumber: 6)
    }
    if self.lensCorrection != 0 {
      try visitor.visitSingularDoubleField(value: self.lensCorrection, fieldNumber: 7)
    }
    if !self.anglesInRadians.isEmpty {
      try visitor.visitPackedDoubleField(value: self.anglesInRadians, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "smartwave"

extension Smartwave_Wrapper: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "messageType"),
    2: .same(proto: "messageBytes"),
  ]

  func _protobuf_generated_isEqualTo(other: Smartwave_Wrapper) -> Bool {
    if self.messageType != other.messageType {return false}
    if self.messageBytes != other.messageBytes {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Smartwave_Wrapper.MessageType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Settings"),
    1: .same(proto: "Frame"),
  ]
}

extension Smartwave_Frame: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identifier"),
    2: .standard(proto: "settings_identifier"),
    3: .same(proto: "timestamp"),
    4: .standard(proto: "channel_samples"),
  ]

  func _protobuf_generated_isEqualTo(other: Smartwave_Frame) -> Bool {
    if self.identifier != other.identifier {return false}
    if self.settingsIdentifier != other.settingsIdentifier {return false}
    if self.timestamp != other.timestamp {return false}
    if self.channelSamples != other.channelSamples {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Smartwave_Settings: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identifier"),
    2: .standard(proto: "channel_count"),
    3: .standard(proto: "samples_per_channel"),
    4: .standard(proto: "element_pitch_millimeters"),
    5: .standard(proto: "sampling_frequency_hz"),
    6: .standard(proto: "central_frequency_hz"),
    7: .standard(proto: "lens_correction"),
    8: .standard(proto: "angles_in_radians"),
  ]

  func _protobuf_generated_isEqualTo(other: Smartwave_Settings) -> Bool {
    if self.identifier != other.identifier {return false}
    if self.channelCount != other.channelCount {return false}
    if self.samplesPerChannel != other.samplesPerChannel {return false}
    if self.elementPitchMillimeters != other.elementPitchMillimeters {return false}
    if self.samplingFrequencyHz != other.samplingFrequencyHz {return false}
    if self.centralFrequencyHz != other.centralFrequencyHz {return false}
    if self.lensCorrection != other.lensCorrection {return false}
    if self.anglesInRadians != other.anglesInRadians {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
